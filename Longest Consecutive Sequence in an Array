class Solution {
    public boolean ls(int[] nums,int x){
        int n=nums.length;
        for(int i=0;i<n;i++){
            if(nums[i]==x){
                return true;
            }
        }
        return false;
    }
    public int longestConsecutive(int[] nums) {
        int n=nums.length;
        if(n==0){
            return 0;
        }
        int longest=1;
       
        for(int i=0;i<n;i++){
            int x=nums[i];
             int cnt=1;
             while(ls(nums,x+1)==true){
                x++;
                cnt++;
             }
             longest=Math.max(cnt,longest);
        }
        return longest;
    }
}

class Solution {
    public int longestConsecutive(int[] nums) {
        int n=nums.length;
        if(n==0)return 0;
        Arrays.sort(nums);
        int longest=1;
        int cnt=0;
        int last=Integer.MIN_VALUE;
        for(int i=0;i<n;i++){
            if(nums[i]-1==last){
                cnt++;
                last=nums[i];
            }else if (nums[i]!=last){
                cnt=1;
                last=nums[i];
            }
            longest=Math.max(longest,cnt);
        }
        return longest;
    }
}

class Solution {
    public int longestConsecutive(int[] nums) {
           int n = nums.length;
        // If the array is empty
        if (n == 0) return 0;

        // Initialize the longest sequence length
        int longest = 1; 
        Set<Integer> st = new HashSet<>();

        // Put all the array elements into the set
        for (int i = 0; i < n; i++) {
            st.add(nums[i]);
        }

        /* Traverse the set to 
           find the longest sequence */
        for (int it : st) {
            // Check if 'it' is a starting number of a sequence
            if (!st.contains(it - 1)) {
                // Initialize the count of the current sequence
                int cnt = 1; 
                // Starting element of the sequence
                int x = it; 

                // Find consecutive numbers in the set
                while (st.contains(x + 1)) {
                    // Move to the next element in the sequence
                    x = x + 1; 
                    // Increment the count of the sequence
                    cnt = cnt + 1; 
                }
                // Update the longest sequence length
                longest = Math.max(longest, cnt);
            }
        }
        return longest;
    }
}



